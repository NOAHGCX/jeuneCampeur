// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int            @id @default(autoincrement())
  username       String
  first_name     String
  last_name      String
  birth_date     DateTime
  hashedPassword String?
  email          String         @unique
  phone          String         @unique
  role           String         @default("USER")
  connection_nb  Int
  purchase_month Int
  purchase_year  Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  last_connexion DateTime       @updatedAt

  address_base   Address_Base[]
  address_fact   Address_Fact[]
  Wishlist       Wishlist[]
  Review         Review[]
  Session        Session[]
  Token          Token[]
  card           Card?
  bdc            BDC[]
}

model Address_Fact {
  id            Int      @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String
  number        Int
  road          String
  city          String
  department    String
  country       String
  postcode      String
  complimentary String?
  bdc            BDC[]
  userID        Int
  user          User     @relation(fields: [userID], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Address_Base {
  id            Int      @id @default(autoincrement())
  number        Int
  road          String
  city          String
  department    String
  country       String
  postcode      String
  complimentary String
  bdc            BDC[]
  userID        Int
  user          User     @relation(fields: [userID], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id           Int                @id @default(autoincrement())
  name         String
  price        Float
  stock        Int
  description  String
  sell_month   Int
  sell_year    Int

  pictures     Pictures[]
  categories   Category[]
  wishlists    Wishlist[]
  reviews      Review[]
  product_card Product_Card[]
  product_bdc  Product_BDC[]

}

model Product_Card {
  id          Int                @id @default(autoincrement())
  quantity      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  card        Card               @relation(fields: [idCard], references: [id])
  idCard      Int
  product     Product            @relation(fields: [idProduct], references: [id])
  idProduct   Int
}


model Pictures {
  id          Int                @id @default(autoincrement())
  name        String
  href        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  product     Product @relation(fields: [productId], references: [id])
  productId    Int
}

model Category {
  id          Int                @id @default(autoincrement())
  name        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  product     Product[]
}

model Card {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt


  idUser       Int            @unique
  user         User           @relation(fields: [idUser], references: [id])
  product_Card Product_Card[]
}

model Wishlist {
  id           Int                @id @default(autoincrement())
  name         String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  idUser       Int
  user        User     @relation(fields: [idUser], references: [id])
  products    Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  grade     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idProduct Int
  idUser    Int
  product   Product  @relation(fields: [idProduct], references: [id])
  user      User     @relation(fields: [idUser], references: [id])
}

model BDC {
  id          Int                @id @default(autoincrement())
  deliveryStatus  DeliveryStatus @default(PENDING)
  totalPrice  Float
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  idAddressBase Int
  address_base  Address_Base     @relation(fields: [idAddressBase], references: [id])
  idAddressFact Int
  address_fact  Address_Fact     @relation(fields: [idAddressFact], references: [id])
  user        User @relation(fields: [idUser], references: [id])
  idUser      Int
  product_BDC Product_BDC[]
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  ERROR
}

model Product_BDC {
  id          Int                @id @default(autoincrement())
  quantity      Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  bdc         BDC               @relation(fields: [idBDC], references: [id])
  idBDC      Int
  product     Product            @relation(fields: [idProduct], references: [id])
  idProduct   Int
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}
// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
